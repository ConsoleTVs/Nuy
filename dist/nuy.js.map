{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/datasets/Dataset.js","webpack:///./src/charts/Chart.js","webpack:///./src/nuy.js","webpack:///./src/charts/Progress.js","webpack:///./node_modules/svg.js/dist/svg.js","webpack:///./src/charts/Multi.js","webpack:///./src/datasets/Bar.js","webpack:///./src/datasets/Point.js","webpack:///./src/datasets/Line.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Dataset","data","_classCallCheck","this","d_data","on_update","d_color","arguments","length","undefined","Chart","nuy","chart","c_height","c_width","c_animate","_getElementDimensions","getElementDimensions","_getElementDimensions2","_slicedToArray","width","height","SVG","container","resize","element","clientWidth","clientHeight","defaultDimensions","size","clear","remove","destroy","_getElementDimensions3","_getElementDimensions4","render","Nuy","document","getElementById","Progress","Multi","window","p_bar","p_thickness","p_radius","p_value","p_center","p_color","p_indeterminate","stop","animate","move","fill","dmove","loop","rect","radius","_get","__proto__","getPrototypeOf","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","supported","Doc","parser","draw","prepare","xmlns","xlink","svgjs","createElementNS","createSVGRect","did","eid","capitalize","setAttribute","extend","methods","slice","pop","Set","inherit","invent","config","initializer","constructor","construct","parent","Container","adopt","node","instance","nodeName","parentNode","SVGElement","Nested","Gradient","Element","type","namespace","defs","setData","JSON","parse","getAttribute","body","getElementsByTagName","documentElement","nested","style","poly","polyline","path","native","addEventListener","regex","numberAndUnit","hex","rgb","reference","transforms","whitespace","isHex","isRgb","isCss","isBlank","isNumber","isPercent","isImage","delimiter","hyphen","pathLetters","isPathLetter","numbersWithDots","dots","utils","map","array","block","il","result","push","filter","radians","Math","PI","degrees","filterSVGElements","nodes","el","defaults","attrs","fill-opacity","stroke-opacity","stroke-width","stroke-linejoin","stroke-linecap","stroke","opacity","x","y","cx","cy","rx","ry","offset","stop-opacity","stop-color","font-size","font-family","text-anchor","Color","color","match","g","b","test","exec","replace","parseInt","substring","join","fullHex","toString","toHex","compToHex","toRgb","brightness","morph","destination","at","pos","isColor","Array","fallback","valueOf","lastValue","lastDestination","settle","seen","indexOf","isArray","split","string","trim","parseFloat","reverse","clone","array_clone","arr","PointArray","toLine","x1","y1","x2","y2","points","len","box","bbox","isNaN","getBBox","pathHandlers","M","p0","L","H","V","C","S","Q","T","Z","A","mlhvqtcsa","j","jl","toUpperCase","PathArray","a","arrayToString","equalCommands","pathArray","sourceArray","destinationArray","paramCnt","pathRegReplace","reduce","prev","curr","concat","Point","index","Number","unit","isFinite","toJSON","plus","number","minus","times","divide","to","relative","_stroke","_event","dom","attr","center","proportionalSize","writeDataToDom","assignNewId","cloneNode","add","after","removeElement","addTo","put","putIn","id","inside","show","hide","visible","classes","hasClass","addClass","removeClass","toggleClass","matches","doc","parents","selector","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","svg","well","createElement","Parent","appendChild","innerHTML","firstChild","childNodes","each","lines","fn","removeAttribute","keys","stringify","is","obj","easing","-","<>","cos",">","sin","<","from","MorphObj","Situation","init","reversed","reversing","duration","delay","start","Date","finish","ease","loops","animations","styles","once","FX","_target","situations","active","situation","paused","lastPos","absPos","_speed","queue","target","timeToAbsPos","timestamp","absPosToTime","startAnimFrame","stopAnimFrame","animationFrame","requestAnimationFrame","step","cancelAnimationFrame","startCurrent","initAnimations","shift","dequeue","source","initialTransformation","matrixify","clearQueue","clearCurrent","jumpToEnd","atEnd","reset","temp","atStart","isAbsPos","durDivSpd","speed","pause","last","play","progress","easeIt","on","wrapper","e","detail","off","_callStart","during","eased","afterAll","duringAll","method","args","ignoreTime","absPosInt","lastLoop","max","floor","Boolean","min","fire","fx","eachAt","self","apply","Matrix","multiply","undo","extract","matrix","isEased","setTimeout","real","v","G","transform","num","Text","plot","leading","viewbox","ViewBox","update","Stop","Box","left","top","fullBox","merge","xMin","Infinity","xMax","yMin","yMax","pts","forEach","BBox","contains","Exception","topParent","Shape","clientLeft","clientTop","tbox","console","warn","rbox","RBox","getBoundingClientRect","addOffset","pageXOffset","pageYOffset","screenCTM","inverse","base","arrayToMatrix","abcdef","px","deltaTransformPoint","py","skewX","atan2","f","transformedX","sqrt","transformedY","skewY","scaleX","scaleY","rotation","parseMatrix","translate","scale","around","rotate","flip","skew","tan","createSVGMatrix","float32String","ctm","getCTM","getScreenCTM","point","createSVGPoint","matrixTransform","attributes","nodeValue","image","Image","pattern","setAttributeNS","rebuild","ensureCentre","Rotate","Scale","Skew","Translate","untransform","str","kv","toParent","pCtm","toDoc","Transformation","inversed","params","_undo","cssText","camelCase","children","insertBefore","has","first","deep","removeChild","hasChildNodes","lastChild","_defs","ungroup","depth","Defs","flatten","view","we","he","wm","hm","reg","offsetWidth","offsetHeight","zoom","event","listeners","handlerMap","listenerId","listener","binding","options","ev","_svgjsListenerId","removeEventListener","Event","dispatchEvent","CustomEvent","cancelable","gbox","trans","group","version","spof","nextSibling","siblings","position","next","previous","forward","backward","front","back","before","Mask","targets","unmask","mask","maskWith","masker","ClipPath","unclip","clip","clipWith","clipper","gradient","fy","Pattern","patternUnits","Bare","words","text","createTextNode","symbol","Use","file","use","Rect","Circle","circle","Ellipse","ellipse","Line","line","Polyline","Polygon","polygon","_array","morphArray","Path","load","url","img","_loaded","ratio","_error","src","loaded","error","_rebuild","_build","oy","nodeType","newLined","textContent","build","tspan","newLine","textPath","blankLineOffset","dy","plain","Tspan","dx","getComputedTextLength","TextPath","track","link","linkTo","Marker","ref","marker","sugar","prefix","toLowerCase","charAt","comp","w","h","abs","extension","getTotalLength","pointAt","getPointAtLength","font","members","elements","splice","set","remember","k","memory","forget","_memory","idFromReference","select","query","querySelectorAll","CustomEventPoly","bubbles","createEvent","initCustomEvent","lastTime","vendors","callback","currTime","getTime","timeToCall","clearTimeout","m_datasets","m_bar_padding","_this2","BarDataset","old_data","new_data","d_bars","d_thickness","getMaxHeight","getMaxValue","_this3","PointDataset","d_points","_this4","LineDataset","_resizeAvailable","resizeAvailable","_resizeAvailable2","slot_space","d_point","a_path","origin","circle_origin","circle_origin2","d_area","d_line","dataset","_this5","getMaxPoint","getMaxDataLength","bars_space","calculateBarsSpace","b_thickness","padding","thickness","_this6","_resizeAvailable3","_resizeAvailable4","max_value","bar_index","v_index","bar_origin","d_radius","log","d_area_enable","Bar"],"mappings":"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","file":"nuy.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","\r\nexport default class Dataset\r\n{\r\n    /**\r\n     * The dataset data.\r\n     */\r\n    d_data = []\r\n\r\n    /**\r\n     * Callback when updated.\r\n     */\r\n    on_update = null\r\n\r\n    /**\r\n     * The color of the dataset.\r\n     */\r\n    d_color = '#6574CD'\r\n\r\n    constructor(data)\r\n    {\r\n        this.d_data = data\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Set the data of the dataset.\r\n     *\r\n     * @param {array} value\r\n     */\r\n    data(value = null)\r\n    {\r\n        if (value != null) {\r\n\r\n            if (this.on_update) {\r\n                this.on_update(this.d_data, value)\r\n            }\r\n\r\n            this.d_data = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.d_data\r\n    }\r\n\r\n    /**\r\n     * Set the dataset color.\r\n     *\r\n     * @param {string} value\r\n     */\r\n    color(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.d_color = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.d_color\r\n    }\r\n}","import 'svg.js'\r\n\r\nexport default class Chart\r\n{\r\n    /**\r\n     * Stores the Nuy instance\r\n     */\r\n    nuy = null\r\n\r\n    /**\r\n     * Contains the svg chart.\r\n     */\r\n    chart = null\r\n\r\n    /**\r\n     * Stores the chart height.\r\n     */\r\n    c_height = null\r\n\r\n    /**\r\n     * Stores the chart width.\r\n     */\r\n    c_width = null\r\n\r\n    /**\r\n     * The chart animation time in ms.\r\n     */\r\n    c_animate = 350\r\n\r\n    /**\r\n     * Constructs the chart\r\n     *\r\n     * @param {Nuy} nuy\r\n     */\r\n    constructor(nuy)\r\n    {\r\n        // Set the nuy instance\r\n        this.nuy = nuy\r\n\r\n        // Precalculate the size of the chart before the SVG method\r\n        var [width, height] = this.getElementDimensions()\r\n\r\n        // Chart init\r\n        this.chart = SVG(nuy.container)\r\n\r\n        // Initial chart resize\r\n        this.resize(width, height)\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Returns the dimensions of the div element.\r\n     */\r\n    getElementDimensions()\r\n    {\r\n        return [this.nuy.element.clientWidth, this.nuy.element.clientHeight]\r\n    }\r\n\r\n    /**\r\n     * Resizes the chart with the given dimensions.\r\n     *\r\n     * @param {float} width\r\n     * @param {float} height\r\n     */\r\n    resize(width = null, height = null)\r\n    {\r\n        this.c_width = width == null || width == 0 ? this.nuy.defaultDimensions[0] : width\r\n        this.c_height = height == null || height == 0 ? this.nuy.defaultDimensions[1] : height\r\n        this.chart.size(this.c_width, this.c_height)\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     *  Set the chart height.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    height(value)\r\n    {\r\n        this.resize(this.c_width, value)\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Set the chart width.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    width(value)\r\n    {\r\n        this.resize(value, this.c_height)\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Set the animation time of the chart.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    animate(value)\r\n    {\r\n        if (value != null) {\r\n            this.c_animate = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.c_animate\r\n    }\r\n\r\n    /**\r\n     * Render function.\r\n     */\r\n    render()\r\n    {\r\n        // Here as a definition.\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Removes the chart.\r\n     */\r\n    remove()\r\n    {\r\n        this.chart.clear()\r\n    }\r\n\r\n    /**\r\n     * Destroy the chart.\r\n     */\r\n    destroy()\r\n    {\r\n        this.chart.remove()\r\n    }\r\n\r\n    /**\r\n     * Removes and renders the chart again.\r\n     */\r\n    reRender()\r\n    {\r\n        this.destroy()\r\n\r\n        this.chart = SVG(this.nuy.container)\r\n\r\n        var [width, height] = this.getElementDimensions()\r\n        this.resize(width, height)\r\n\r\n        return this.render()\r\n    }\r\n}","import Progress from './charts/Progress'\r\nimport Multi from './charts/Multi'\r\n\r\nexport default class Nuy\r\n{\r\n    /**\r\n     * The container (id) where the chart will be rendered.\r\n     */\r\n    container = null\r\n\r\n    /**\r\n     * Stores the element where to plot the chart.\r\n     */\r\n    element = null\r\n\r\n    /**\r\n     * Stores the default dimensions.\r\n     */\r\n    defaultDimensions = [500, 500]\r\n\r\n    constructor(container)\r\n    {\r\n        this.container = container\r\n        this.element = document.getElementById(container)\r\n\r\n        return this\r\n    }\r\n\r\n    progress()\r\n    {\r\n        return new Progress(this)\r\n    }\r\n\r\n    multi()\r\n    {\r\n        return new Multi(this)\r\n    }\r\n}\r\n\r\nwindow.Nuy = Nuy","import Chart from './Chart'\r\n\r\nexport default class Progress extends Chart\r\n{\r\n    /**\r\n     * Stores the bar object.\r\n     */\r\n    p_bar = null\r\n\r\n    /**\r\n     * The bar thickness.\r\n     */\r\n    p_thickness = 10\r\n\r\n    /**\r\n     * The bar edge radius.\r\n     */\r\n    p_radius = 5\r\n\r\n    /**\r\n     * The value of the progress bar.\r\n     */\r\n    p_value = 0\r\n\r\n    /**\r\n     * Determines if the bar is vertically centered.\r\n     */\r\n    p_center = true\r\n\r\n    /**\r\n     * Determines the bar color.\r\n     */\r\n    p_color = \"#6574CD\"\r\n\r\n    /**\r\n     * Determines if the progress is indeterminate.\r\n     */\r\n    p_indeterminate = false\r\n\r\n    /**\r\n     * Set the bar thickness.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    thickness(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.p_thickness = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.p_thickness\r\n    }\r\n\r\n    /**\r\n     * Set the bar edge radius.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    radius(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.p_radius = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.p_radius\r\n    }\r\n\r\n    /**\r\n     * Set or get the progress of the chart.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    value(value = null)\r\n    {\r\n        if (value != null) {\r\n            if (value < 0 || value > 100) {\r\n                throw \"The value of the progress must be between 0 and 100.\";\r\n            }\r\n\r\n            this.p_value = value\r\n\r\n            if (this.p_bar) {\r\n                // Animate the update of the value\r\n                if (this.p_indeterminate) {\r\n                    this.p_bar\r\n                        .stop()\r\n                        .animate(this.c_animate, '<>')\r\n                        .size(2.55 * this.c_width / 100, this.p_thickness)\r\n                        .animate(this.c_animate, '<>')\r\n                        .move(0, this.p_center ? (this.c_height / 2) - (this.p_thickness / 2) : 0)\r\n                    this.p_indeterminate = false\r\n                }\r\n\r\n                this.p_bar\r\n                    .animate(this.c_animate, '<>')\r\n                    .size(value * this.c_width / 100, this.p_thickness)\r\n            }\r\n\r\n            return this\r\n        }\r\n\r\n        return this.p_value\r\n    }\r\n\r\n    /**\r\n     * Determines if the bar is vertically centered.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    center(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.p_center = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.p_center\r\n    }\r\n\r\n    /**\r\n     * Determines the bar color.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    color(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.p_color = value\r\n\r\n            // Animate the color\r\n            if (this.p_bar) {\r\n                this.p_bar\r\n                    .animate(this.c_animate, '<>')\r\n                    .fill(value)\r\n            }\r\n\r\n            return this\r\n        }\r\n\r\n        return this.p_color\r\n    }\r\n\r\n    /**\r\n     * Determines if the progress is indeterminate.\r\n     *\r\n     * @param {bool} value\r\n     */\r\n    indeterminate(value = null)\r\n    {\r\n        if (value != null) {\r\n\r\n            if (this.p_bar) {\r\n                if (value) {\r\n                    this.p_bar\r\n                        .animate(this.c_animate, '<>')\r\n                        .size(\r\n                            20 * this.c_width / 100,\r\n                            this.p_thickness\r\n                        )\r\n                        .animate(this.c_animate * 2, '<>')\r\n                        .dmove(80 * this.c_width / 100, 0)\r\n                        .loop(null, true)\r\n\r\n                    this.p_indeterminate = value\r\n\r\n                    return this\r\n                }\r\n\r\n                this.value(this.value)\r\n            }\r\n\r\n            this.p_indeterminate = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.p_indeterminate\r\n    }\r\n\r\n    /**\r\n     * Renders the chart to the SVG container.\r\n     */\r\n    render()\r\n    {\r\n        this.p_bar = this.chart\r\n            .rect(0, this.p_thickness)\r\n            .radius(this.p_radius)\r\n            .fill(this.p_color)\r\n            .move(0, this.p_center ? (this.c_height / 2) - (this.p_thickness / 2) : 0)\r\n        if (this.p_indeterminate) {\r\n            this.p_bar\r\n                .size(\r\n                    20 * this.c_width / 100,\r\n                    this.p_thickness\r\n                )\r\n                .animate(this.c_animate * 2, '<>')\r\n                .dmove(80 * this.c_width / 100, 0)\r\n                .loop(null, true)\r\n\r\n            return super.render()\r\n        }\r\n        this.p_bar\r\n            .animate(this.c_animate, '<>')\r\n            .size(\r\n                (this.p_indeterminate ? 25 : this.p_value) * this.c_width / 100,\r\n                this.p_thickness\r\n            )\r\n\r\n        return super.render()\r\n    }\r\n}","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.6.5\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Sat May 26 2018 22:47:07 GMT+0200 (Mitteleuropäische Sommerzeit)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function(){\r\n      return factory(root, root.document)\r\n    })\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) }\r\n  } else {\r\n    root.SVG = factory(root, root.document)\r\n  }\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// The main wrapping element\r\nvar SVG = this.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        // make sure to use a clone\r\n        return array.map(function (el) { return el.slice() })\r\n      } else if (array[0].x != null){\r\n        // allow point objects to be passed\r\n        return array.map(function (el) { return [el.x, el.y] })\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        if(!parent.node.parentNode || parent.node.parentNode.nodeName == '#document') return null // #759, #720\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // check if we have a list of values\r\n    if(SVG.regex.delimiter.test(from)) {\r\n      // prepare path for morphing\r\n      if(SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to)\r\n      // prepare value list for morphing\r\n      else return new SVG.Array(from).morph(to)\r\n    }\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      // Construct the matrix directly, avoid values that are too small\r\n      return 'matrix(' + float32String(this.a) + ',' + float32String(this.b)\r\n        + ',' + float32String(this.c) + ',' + float32String(this.d)\r\n        + ',' + float32String(this.e) + ',' + float32String(this.f)\r\n        + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n;[  'click'\r\n  , 'dblclick'\r\n  , 'mousedown'\r\n  , 'mouseup'\r\n  , 'mouseover'\r\n  , 'mouseout'\r\n  , 'mousemove'\r\n  // , 'mouseenter' -> not supported by IE\r\n  // , 'mouseleave' -> not supported by IE\r\n  , 'touchstart'\r\n  , 'touchmove'\r\n  , 'touchleave'\r\n  , 'touchend'\r\n  , 'touchcancel' ].forEach(function(event) {\r\n\r\n  // add event to SVG.Element\r\n  SVG.Element.prototype[event] = function(f) {\r\n    // bind event to element rather than element node\r\n    SVG.on(this.node, event, f)\r\n    return this\r\n  }\r\n})\r\n\r\n// Initialize listeners stack\r\nSVG.listeners = []\r\nSVG.handlerMap = []\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function(node, event, listener, binding, options) {\r\n  // create listener, get object-index\r\n  var l     = listener.bind(binding || node.instance || node)\r\n    , index = (SVG.handlerMap.indexOf(node) + 1 || SVG.handlerMap.push(node)) - 1\r\n    , ev    = event.split('.')[0]\r\n    , ns    = event.split('.')[1] || '*'\r\n\r\n\r\n  // ensure valid object\r\n  SVG.listeners[index]         = SVG.listeners[index]         || {}\r\n  SVG.listeners[index][ev]     = SVG.listeners[index][ev]     || {}\r\n  SVG.listeners[index][ev][ns] = SVG.listeners[index][ev][ns] || {}\r\n\r\n  if(!listener._svgjsListenerId)\r\n    listener._svgjsListenerId = ++SVG.listenerId\r\n\r\n  // reference listener\r\n  SVG.listeners[index][ev][ns][listener._svgjsListenerId] = l\r\n\r\n  // add listener\r\n  node.addEventListener(ev, l, options || false)\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function(node, event, listener) {\r\n  var index = SVG.handlerMap.indexOf(node)\r\n    , ev    = event && event.split('.')[0]\r\n    , ns    = event && event.split('.')[1]\r\n    , namespace = ''\r\n\r\n  if(index == -1) return\r\n\r\n  if (listener) {\r\n    if(typeof listener == 'function') listener = listener._svgjsListenerId\r\n    if(!listener) return\r\n\r\n    // remove listener reference\r\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns || '*']) {\r\n      // remove listener\r\n      node.removeEventListener(ev, SVG.listeners[index][ev][ns || '*'][listener], false)\r\n\r\n      delete SVG.listeners[index][ev][ns || '*'][listener]\r\n    }\r\n\r\n  } else if (ns && ev) {\r\n    // remove all listeners for a namespaced event\r\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns]) {\r\n      for (listener in SVG.listeners[index][ev][ns])\r\n        SVG.off(node, [ev, ns].join('.'), listener)\r\n\r\n      delete SVG.listeners[index][ev][ns]\r\n    }\r\n\r\n  } else if (ns){\r\n    // remove all listeners for a specific namespace\r\n    for(event in SVG.listeners[index]){\r\n        for(namespace in SVG.listeners[index][event]){\r\n            if(ns === namespace){\r\n                SVG.off(node, [event, ns].join('.'))\r\n            }\r\n        }\r\n    }\r\n\r\n  } else if (ev) {\r\n    // remove all listeners for the event\r\n    if (SVG.listeners[index][ev]) {\r\n      for (namespace in SVG.listeners[index][ev])\r\n        SVG.off(node, [ev, namespace].join('.'))\r\n\r\n      delete SVG.listeners[index][ev]\r\n    }\r\n\r\n  } else {\r\n    // remove all listeners on a given node\r\n    for (event in SVG.listeners[index])\r\n      SVG.off(node, event)\r\n\r\n    delete SVG.listeners[index]\r\n    delete SVG.handlerMap[index]\r\n\r\n  }\r\n}\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function(event, listener, binding, options) {\r\n    SVG.on(this.node, event, listener, binding, options)\r\n\r\n    return this\r\n  }\r\n  // Unbind event from listener\r\n, off: function(event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n\r\n    return this\r\n  }\r\n  // Fire given event\r\n, fire: function(event, data) {\r\n\r\n    // Dispatch event\r\n    if(event instanceof window.Event){\r\n        this.node.dispatchEvent(event)\r\n    }else{\r\n        this.node.dispatchEvent(event = new SVG.CustomEvent(event, {detail:data, cancelable: true}))\r\n    }\r\n\r\n    this._event = event\r\n    return this\r\n  }\r\n, event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      if(!this.node.parentNode || this.node.parentNode.nodeName == '#document') return null\r\n      return this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function() {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  , clone: function (parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // get reference to node\r\n      var node = this.node\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) {\r\n        (parent.node || parent).appendChild(clone.node)\r\n      } else {\r\n        node.parentNode.insertBefore(clone.node, node.nextSibling)\r\n      }\r\n\r\n      return clone\r\n    }\r\n  }\r\n\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      SVG.Element.prototype.remove.call(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        SVG.off(img)\r\n\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        SVG.off(img)\r\n\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y.valueOf() === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    // Set initial state\r\n    Array.isArray(members) ? this.members = members : this.clear()\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = (url || '').toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// If values like 1e-88 are passed, this is not a valid 32 bit float,\r\n// but in those cases, we are so close to 0 that 0 works well!\r\nfunction float32String(v) {\r\n  return Math.abs(v) > 1e-37 ? v : 0\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\r\n\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEventPoly = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEventPoly.prototype = window.Event.prototype\r\n\r\n  SVG.CustomEvent = CustomEventPoly\r\n} else {\r\n  SVG.CustomEvent = window.CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r","import Chart from './Chart'\r\nimport BarDataset from '../datasets/Bar'\r\nimport PointDataset from '../datasets/Point'\r\nimport LineDataset from '../datasets/Line'\r\n\r\nexport default class Multi extends Chart\r\n{\r\n    /**\r\n     * Stores the datasets used in the bar chart.\r\n     */\r\n    m_datasets = []\r\n\r\n    /**\r\n     * Padding of the bars in the same set.\r\n     */\r\n    m_bar_padding = 5\r\n\r\n    /**\r\n     * Create a new bar dataset for the chart.\r\n     *\r\n     * @param {array} value\r\n     */\r\n    barDataset(value)\r\n    {\r\n        let data = new BarDataset(value)\r\n\r\n        this.m_datasets.push(data)\r\n\r\n        data.on_update = (old_data, new_data) => {\r\n            data.d_bars.forEach((value, index) => {\r\n                if (new_data[index] != old_data[index]) {\r\n                    value\r\n                        .animate(this.c_animate, '<>')\r\n                        .size(data.d_thickness, (new_data[index] * this.getMaxHeight()) / this.getMaxValue())\r\n                }\r\n            })\r\n        }\r\n\r\n        return data\r\n    }\r\n\r\n    /**\r\n     * Create a new point dataset for the chart.\r\n     *\r\n     * @param {array} value\r\n     */\r\n    pointDataset(value)\r\n    {\r\n        let data = new PointDataset(value)\r\n\r\n        this.m_datasets.push(data)\r\n\r\n        data.on_update = (old_data, new_data) => {\r\n            data.d_points.forEach((value, index) => {\r\n                if (new_data[index] != old_data[index]) {\r\n                    value\r\n                        .animate(this.c_animate, '<>')\r\n                        .dmove(\r\n                            0,\r\n                            ((old_data[index] * this.getMaxHeight()) / this.getMaxValue())\r\n                            - ((new_data[index] * this.getMaxHeight()) / this.getMaxValue())\r\n                        )\r\n                }\r\n            })\r\n        }\r\n\r\n        return data\r\n    }\r\n\r\n    /**\r\n     * Create a new line dataset for the chart.\r\n     *\r\n     * @param {array} value\r\n     */\r\n    lineDataset(value)\r\n    {\r\n        let data = new LineDataset(value)\r\n\r\n        this.m_datasets.push(data)\r\n\r\n        data.on_update = (old_data, new_data) => {\r\n            var [slot_space, bars_space] = this.resizeAvailable()\r\n            let offset = data.d_point / 2\r\n            var path = \"M\"\r\n            var a_path = \"M\"\r\n            data.d_points.forEach((value, index) => {\r\n                let set = (slot_space * index)\r\n                let origin = set + (slot_space / 2)\r\n                let circle_origin = origin - offset\r\n                let circle_origin2 = (this.c_height - (new_data[index] * this.getMaxHeight()) / this.getMaxValue()) - offset\r\n                if (index > 0) {\r\n                    path += \"L\"\r\n                    a_path += \"L\"\r\n                } else {\r\n                    a_path += origin + \" \" + this.c_height + \" \"\r\n                }\r\n                path += (circle_origin + offset) + \" \" + (circle_origin2 + offset) + \" \"\r\n                a_path += (circle_origin + offset) + \" \" + (circle_origin2 + offset) + \" \"\r\n\r\n                if (index == data.d_data.length - 1) {\r\n                    a_path += \"L\" + origin + \" \" + this.c_height + \"\"\r\n                }\r\n\r\n                if (new_data[index] != old_data[index]) {\r\n                    value\r\n                        .animate(this.c_animate, '<>')\r\n                        .dmove(\r\n                            0,\r\n                            ((old_data[index] * this.getMaxHeight()) / this.getMaxValue())\r\n                            - ((new_data[index] * this.getMaxHeight()) / this.getMaxValue())\r\n                        )\r\n                }\r\n            })\r\n\r\n            data.d_area\r\n            .animate(this.c_animate, '<>')\r\n            .plot(a_path)\r\n\r\n            data.d_line\r\n                .animate(this.c_animate, '<>')\r\n                .plot(path)\r\n        }\r\n\r\n        return data\r\n    }\r\n\r\n    /**\r\n     * Set the bar padding in each set.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    padding(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.m_bar_padding = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.m_bar_padding\r\n    }\r\n\r\n    /**\r\n     * Helper to get the max value from the datasets data.\r\n     */\r\n    getMaxValue()\r\n    {\r\n        // Avoid using spread operator or .apply as they may fail\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max\r\n        return this.m_datasets\r\n            .map((dataset) => dataset.d_data.reduce(function(a, b) {\r\n                return Math.max(a, b);\r\n            }))\r\n            .reduce(function(a, b) {\r\n                return Math.max(a, b);\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Helper to get the most data length in the datasets.\r\n     */\r\n    getMaxDataLength()\r\n    {\r\n        return this.m_datasets.reduce((a, b) => b.d_data.length > a.d_data.length ? b : a).d_data.length\r\n    }\r\n\r\n    /**\r\n     * Calculates the space of the bars.\r\n     */\r\n    calculateBarsSpace()\r\n    {\r\n        return this.m_datasets\r\n            .map((a) => a instanceof BarDataset ? a.d_thickness + (this.m_bar_padding * 2) : 0)\r\n            .reduce((a, b) => a + b)\r\n    }\r\n\r\n    /**\r\n     * Helper to get the max point thickness\r\n     */\r\n    getMaxPoint()\r\n    {\r\n        return this.m_datasets\r\n            .map((dataset) => {\r\n                if (dataset instanceof LineDataset || dataset instanceof PointDataset) {\r\n                    return dataset.d_point\r\n                }\r\n                return 0\r\n            })\r\n            .reduce((a, b) => {\r\n                return Math.max(a, b);\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Helper to determine the max height of the chart, added the point circle\r\n     */\r\n    getMaxHeight()\r\n    {\r\n        return this.c_height - (this.getMaxPoint() / 2)\r\n    }\r\n\r\n    /**\r\n     * Returns the dimensions and resizes the chart.\r\n     */\r\n    resizeAvailable()\r\n    {\r\n        if (this.m_datasets.length == 0) {\r\n            throw 'You need at least 1 dataset to use the resize'\r\n        }\r\n\r\n        // Calculate the available slot and bar space\r\n        let slot_space = (this.c_width / this.getMaxDataLength())\r\n        // let bars_space = this.m_datasets.length * (this.b_thickness + (this.m_bar_padding * 2))\r\n        let bars_space = this.calculateBarsSpace()\r\n\r\n        // Calculate if the spaces are correct\r\n        while (bars_space + (this.m_bar_padding * 3) > slot_space) {\r\n            if (this.b_thickness == 1 && this.m_bar_padding == 0) {\r\n                throw 'The space of the bars is too much for the space availabe. (' + bars_space + 'px used of ' + slot_space + 'px  available)'\r\n            }\r\n            console.warn('The space of the bars is too much for the space availabe. Trying to shorten the bars and/or padding');\r\n            if (this.m_bar_padding > 0) {\r\n                this.padding(this.m_bar_padding - 1)\r\n            }\r\n            this.m_datasets.forEach((a) => {\r\n                if (a instanceof BarDataset && a.d_thickness > 1) {\r\n                    a.thickness(a.d_thickness - 1)\r\n                }\r\n            })\r\n            slot_space = this.c_width / this.getMaxDataLength() // Not needed ?\r\n            bars_space = this.calculateBarsSpace()\r\n        }\r\n\r\n        return [slot_space, bars_space]\r\n    }\r\n\r\n    /**\r\n     * Renders the chart to the SVG container.\r\n     */\r\n    render()\r\n    {\r\n        if (this.m_datasets.length == 0) {\r\n            throw 'You need at least 1 dataset to use this chart'\r\n        }\r\n\r\n        var [slot_space, bars_space] = this.resizeAvailable()\r\n\r\n        let max_value = this.getMaxValue()\r\n        let bar_index = 0\r\n        // Create the chart\r\n        this.m_datasets.forEach((dataset) => {\r\n\r\n            /**\r\n             * Bar dataset\r\n             */\r\n            if (dataset instanceof BarDataset) {\r\n                dataset.d_data.forEach((value, v_index) => {\r\n                    let set = (slot_space * v_index)\r\n                    let origin = (slot_space / 2) + set - (bars_space / 2)\r\n                    let bar_origin =\r\n                        origin\r\n                        + ((this.m_bar_padding + dataset.d_thickness + this.m_bar_padding) * bar_index)\r\n                        + this.m_bar_padding\r\n                    dataset.d_bars.push(this.chart\r\n                        .rect(dataset.d_thickness, 0)\r\n                        .move(bar_origin, - (this.c_height))\r\n                        .flip('y')\r\n                        .fill(dataset.d_color)\r\n                        .radius(dataset.d_radius)\r\n                        .animate(this.c_animate, '<>')\r\n                        .size(dataset.d_thickness, (value * this.getMaxHeight()) / max_value)\r\n                    )\r\n                })\r\n                bar_index++\r\n            }\r\n\r\n            /**\r\n             * Point dataset\r\n             */\r\n            else if (dataset instanceof PointDataset) {\r\n                dataset.d_data.forEach((value, v_index) => {\r\n                    let set = (slot_space * v_index)\r\n                    let origin = set + (slot_space / 2)\r\n                    let circle_origin = origin - (dataset.d_point / 2)\r\n                    dataset.d_points.push(this.chart\r\n                        .circle(0)\r\n                        .radius(dataset.d_point / 2)\r\n                        .move(circle_origin, (this.c_height - (value * this.getMaxHeight()) / max_value) - (dataset.d_point / 2))\r\n                        .radius(0)\r\n                        .fill(dataset.d_color)\r\n                        .animate(this.c_animate, '<>')\r\n                        .radius(dataset.d_point / 2)\r\n                    )\r\n                })\r\n            }\r\n\r\n            /**\r\n             * Line dataset\r\n             */\r\n            else if (dataset instanceof LineDataset) {\r\n                let path = \"M\"\r\n                let a_path = \"M\"\r\n                let offset = dataset.d_point / 2\r\n                console.log(dataset.d_point)\r\n                dataset.d_data.forEach((value, v_index) => {\r\n                    let set = (slot_space * v_index)\r\n                    let origin = set + (slot_space / 2)\r\n                    let circle_origin = origin - offset\r\n                    let circle_origin2 = (this.c_height - (value * this.getMaxHeight()) / max_value) - offset\r\n                    dataset.d_points.push(this.chart\r\n                        .circle(0)\r\n                        .radius(offset)\r\n                        .move(circle_origin, circle_origin2)\r\n                        .radius(0)\r\n                        .fill(dataset.d_color)\r\n                        .animate(this.c_animate, '<>')\r\n                        .radius(offset)\r\n                    )\r\n                    if (v_index > 0) {\r\n                        path += \"L\"\r\n                        a_path += \"L\"\r\n                    } else {\r\n                        a_path += origin + \" \" + this.c_height + \" \"\r\n                    }\r\n                    path += (circle_origin + offset) + \" \" + (circle_origin2 + offset) + \" \"\r\n                    a_path += (circle_origin + offset) + \" \" + (circle_origin2 + offset) + \" \"\r\n\r\n                    if (v_index == dataset.d_data.length - 1) {\r\n                        a_path += \"L\" + origin + \" \" + this.c_height + \"\"\r\n                    }\r\n\r\n                })\r\n\r\n                if (dataset.d_area_enable) {\r\n                    dataset.d_area = this.chart\r\n                        .path(a_path)\r\n                        .fill(dataset.d_color)\r\n                        .opacity(0)\r\n                        .animate(this.c_animate, '<>')\r\n                        .opacity(0.25)\r\n                }\r\n\r\n                dataset.d_line = this.chart\r\n                    .path(path)\r\n                    .fill('transparent')\r\n                    .stroke(dataset.d_color)\r\n                    .animate(this.c_animate, '<>')\r\n                    .stroke({\r\n                        width: dataset.d_thickness\r\n                    })\r\n            }\r\n        })\r\n\r\n        return super.render()\r\n    }\r\n}","import Dataset from './Dataset'\r\n\r\nexport default class Bar extends Dataset\r\n{\r\n    /**\r\n     * The line thickness.\r\n     */\r\n    d_thickness = 10\r\n\r\n    /**\r\n     * The bar edge radius (rounded edges).\r\n     */\r\n    d_radius = 5\r\n\r\n    /**\r\n     * Stores the bars itself.\r\n     */\r\n    d_bars = []\r\n\r\n    /**\r\n     * Set or get the dataset thickness.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    thickness(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.d_thickness = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.d_thickness\r\n    }\r\n\r\n    /**\r\n     * Set the bar edge radius.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    radius(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.d_radius = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.d_radius\r\n    }\r\n}","import Dataset from './Dataset'\r\n\r\nexport default class Point extends Dataset\r\n{\r\n    /**\r\n     * The radius of the point.\r\n     */\r\n    d_point = 5\r\n\r\n    /**\r\n     * Stores the dataset points.\r\n     */\r\n    d_points = []\r\n\r\n    /**\r\n     * Set or get the dataset point radius.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    point(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.d_point = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.d_point\r\n    }\r\n}","import Dataset from './Dataset'\r\n\r\nexport default class Line extends Dataset\r\n{\r\n    /**\r\n     * The line thickness.\r\n     */\r\n    d_thickness = 3\r\n\r\n    /**\r\n     * The radius of the point.\r\n     */\r\n    d_point = 10\r\n\r\n    /**\r\n     * Determines if the line will display an area.\r\n     */\r\n    d_area_enable = false\r\n\r\n    /**\r\n     * Stores the dataset line.\r\n     */\r\n    d_line = null\r\n\r\n    /**\r\n     * Stores the dataset area.\r\n     */\r\n    d_area = null\r\n\r\n    /**\r\n     * Stores the dataset points.\r\n     */\r\n    d_points = []\r\n\r\n    /**\r\n     * Set or get the dataset thickness.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    thickness(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.d_thickness = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.d_thickness\r\n    }\r\n\r\n    /**\r\n     * Set or get the dataset point radius.\r\n     *\r\n     * @param {float} value\r\n     */\r\n    point(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.d_point = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.d_point\r\n    }\r\n\r\n    /**\r\n     * Determines if the line will show an area.\r\n     *\r\n     * @param {bool} value\r\n     */\r\n    area(value = null)\r\n    {\r\n        if (value != null) {\r\n            this.d_area_enable = value\r\n\r\n            return this\r\n        }\r\n\r\n        return this.d_area_enable\r\n    }\r\n}"],"sourceRoot":""}